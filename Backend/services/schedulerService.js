const cron = require('node-cron');
const dailyQuotesService = require('./dailyQuotesService');

class SchedulerService {
    constructor() {
        this.jobs = new Map();
        this.isRunning = false;
    }

    // Kh·ªüi ƒë·ªông scheduler
    start() {
        if (this.isRunning) {
            console.log('Scheduler is already running');
            return;
        }

        console.log('üöÄ Starting Daily Quotes Scheduler...');

        // Job g·ª≠i quotes h√†ng ng√†y l√∫c 8:00 s√°ng
        const dailyQuotesJob = cron.schedule('0 8 * * *', async () => {
            console.log('üìß Starting daily quotes sending process...');
            try {
                const result = await dailyQuotesService.sendDailyQuotesToAllUsers();
                console.log('‚úÖ Daily quotes sending completed:', result);
            } catch (error) {
                console.error('‚ùå Error in daily quotes job:', error);
            }
        }, {
            scheduled: false,
            timezone: "Asia/Ho_Chi_Minh"
        });

        // Job backup g·ª≠i quotes l√∫c 9:00 s√°ng (n·∫øu job ƒë·∫ßu th·∫•t b·∫°i)
        const backupQuotesJob = cron.schedule('0 9 * * *', async () => {
            console.log('üìß Starting backup daily quotes sending process...');
            try {
                const result = await dailyQuotesService.sendDailyQuotesToAllUsers();
                console.log('‚úÖ Backup daily quotes sending completed:', result);
            } catch (error) {
                console.error('‚ùå Error in backup daily quotes job:', error);
            }
        }, {
            scheduled: false,
            timezone: "Asia/Ho_Chi_Minh"
        });

        // Job cleanup logs c≈© (ch·∫°y h√†ng tu·∫ßn)
        const cleanupJob = cron.schedule('0 0 * * 0', async () => {
            console.log('üßπ Starting cleanup process...');
            try {
                // C√≥ th·ªÉ th√™m logic cleanup ·ªü ƒë√¢y
                console.log('‚úÖ Cleanup completed');
            } catch (error) {
                console.error('‚ùå Error in cleanup job:', error);
            }
        }, {
            scheduled: false,
            timezone: "Asia/Ho_Chi_Minh"
        });

        // L∆∞u c√°c jobs
        this.jobs.set('dailyQuotes', dailyQuotesJob);
        this.jobs.set('backupQuotes', backupQuotesJob);
        this.jobs.set('cleanup', cleanupJob);

        // Kh·ªüi ƒë·ªông c√°c jobs
        dailyQuotesJob.start();
        backupQuotesJob.start();
        cleanupJob.start();

        this.isRunning = true;
        console.log('‚úÖ Scheduler started successfully');
        console.log('üìÖ Daily quotes will be sent at 8:00 AM (Vietnam time)');
        console.log('üîÑ Backup sending at 9:00 AM (Vietnam time)');
        console.log('üßπ Cleanup runs every Sunday at midnight');
    }

    // D·ª´ng scheduler
    stop() {
        if (!this.isRunning) {
            console.log('Scheduler is not running');
            return;
        }

        console.log('üõë Stopping Scheduler...');
        
        this.jobs.forEach((job, name) => {
            job.stop();
            console.log(`‚úÖ Stopped job: ${name}`);
        });

        this.jobs.clear();
        this.isRunning = false;
        console.log('‚úÖ Scheduler stopped successfully');
    }

    // Restart scheduler
    restart() {
        console.log('üîÑ Restarting Scheduler...');
        this.stop();
        setTimeout(() => {
            this.start();
        }, 1000);
    }

    // L·∫•y tr·∫°ng th√°i scheduler
    getStatus() {
        return {
            isRunning: this.isRunning,
            jobs: Array.from(this.jobs.keys()),
            nextRuns: this.getNextRuns()
        };
    }

    // L·∫•y th·ªùi gian ch·∫°y ti·∫øp theo c·ªßa c√°c jobs
    getNextRuns() {
        const nextRuns = {};
        this.jobs.forEach((job, name) => {
            if (job.running) {
                nextRuns[name] = 'Running';
            } else {
                nextRuns[name] = 'Scheduled';
            }
        });
        return nextRuns;
    }

    // Ch·∫°y job ngay l·∫≠p t·ª©c (cho testing)
    async runJobNow(jobName) {
        console.log(`üöÄ Running ${jobName} job immediately...`);
        
        try {
            switch (jobName) {
                case 'dailyQuotes':
                    const result = await dailyQuotesService.sendDailyQuotesToAllUsers();
                    console.log('‚úÖ Daily quotes job completed:', result);
                    return result;
                case 'backupQuotes':
                    const backupResult = await dailyQuotesService.sendDailyQuotesToAllUsers();
                    console.log('‚úÖ Backup quotes job completed:', backupResult);
                    return backupResult;
                default:
                    throw new Error(`Unknown job: ${jobName}`);
            }
        } catch (error) {
            console.error(`‚ùå Error running ${jobName} job:`, error);
            throw error;
        }
    }

    // Th√™m job t√πy ch·ªânh
    addCustomJob(name, cronExpression, callback, timezone = "Asia/Ho_Chi_Minh") {
        if (this.jobs.has(name)) {
            throw new Error(`Job ${name} already exists`);
        }

        const job = cron.schedule(cronExpression, callback, {
            scheduled: false,
            timezone: timezone
        });

        this.jobs.set(name, job);
        job.start();
        
        console.log(`‚úÖ Added custom job: ${name} with schedule: ${cronExpression}`);
        return job;
    }

    // X√≥a job t√πy ch·ªânh
    removeCustomJob(name) {
        if (!this.jobs.has(name)) {
            throw new Error(`Job ${name} does not exist`);
        }

        const job = this.jobs.get(name);
        job.stop();
        this.jobs.delete(name);
        
        console.log(`‚úÖ Removed custom job: ${name}`);
    }
}

module.exports = new SchedulerService();
