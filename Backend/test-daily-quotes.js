// Test script cho t√≠nh nƒÉng Daily Quotes
require('dotenv').config();
const mongoose = require('mongoose');
const dailyQuotesService = require('./services/dailyQuotesService');
const schedulerService = require('./services/schedulerService');
const { Quote, UserEmailSettings } = require('./model/quote');

async function testDailyQuotesFeature() {
    try {
        console.log('üß™ Testing Daily Quotes Feature...\n');
        
        // K·∫øt n·ªëi database
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chatbot');
        console.log('üì¶ Connected to MongoDB\n');
        
        // Test 1: Ki·ªÉm tra quotes trong database
        console.log('1Ô∏è‚É£ Testing quotes in database...');
        const quotesCount = await Quote.countDocuments();
        console.log(`üìä Total quotes: ${quotesCount}`);
        
        if (quotesCount === 0) {
            console.log('‚ö†Ô∏è No quotes found. Please run: node seed-quotes.js');
            return;
        }
        
        // Test 2: L·∫•y quote ng·∫´u nhi√™n
        console.log('\n2Ô∏è‚É£ Testing random quote selection...');
        const randomQuote = await dailyQuotesService.getRandomQuote('motivation', 'vi');
        if (randomQuote) {
            console.log(`‚úÖ Random quote: "${randomQuote.content}" - ${randomQuote.author}`);
        } else {
            console.log('‚ùå No random quote found');
        }
        
        // Test 3: Ki·ªÉm tra user email settings
        console.log('\n3Ô∏è‚É£ Testing user email settings...');
        const settingsCount = await UserEmailSettings.countDocuments();
        console.log(`üìß User email settings: ${settingsCount}`);
        
        // Test 4: Test g·ª≠i quote cho m·ªôt user c·ª• th·ªÉ
        console.log('\n4Ô∏è‚É£ Testing send quote to specific user...');
        const testEmail = process.env.EMAIL_USER; // S·ª≠ d·ª•ng email t·ª´ .env
        const testUserId = '507f1f77bcf86cd799439011'; // Fake ObjectId for testing
        
        if (testEmail) {
            const result = await dailyQuotesService.sendDailyQuoteToUser(
                testUserId, 
                testEmail, 
                'Test User'
            );
            
            if (result.success) {
                console.log('‚úÖ Quote sent successfully to:', testEmail);
                console.log('üìß Message ID:', result.messageId);
            } else {
                console.log('‚ùå Failed to send quote:', result.message);
            }
        } else {
            console.log('‚ö†Ô∏è EMAIL_USER not set in .env, skipping email test');
        }
        
        // Test 5: Test scheduler status
        console.log('\n5Ô∏è‚É£ Testing scheduler status...');
        const schedulerStatus = schedulerService.getStatus();
        console.log('üïê Scheduler running:', schedulerStatus.isRunning);
        console.log('üìã Active jobs:', schedulerStatus.jobs);
        
        // Test 6: Test run job immediately
        console.log('\n6Ô∏è‚É£ Testing immediate job execution...');
        try {
            const jobResult = await schedulerService.runJobNow('dailyQuotes');
            console.log('‚úÖ Job executed successfully');
            console.log('üìä Results:', jobResult);
        } catch (error) {
            console.log('‚ùå Job execution failed:', error.message);
        }
        
        console.log('\nüéâ Daily Quotes feature testing completed!');
        
    } catch (error) {
        console.error('‚ùå Test failed:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üì¶ Disconnected from MongoDB');
    }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    testDailyQuotesFeature().catch(console.error);
}

module.exports = { testDailyQuotesFeature };
